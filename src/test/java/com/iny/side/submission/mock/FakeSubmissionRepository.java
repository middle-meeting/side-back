package com.iny.side.submission.mock;

import com.iny.side.submission.domain.entity.Submission;
import com.iny.side.submission.domain.repository.SubmissionRepository;
import com.iny.side.submission.domain.vo.SubmissionDetailVo;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeSubmissionRepository implements SubmissionRepository {
    
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Submission> data = new ArrayList<>();
    
    @Override
    public Submission save(Submission submission) {
        if (submission.getId() == null || submission.getId() == 0) {
            Submission savedSubmission = Submission.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .student(submission.getStudent())
                    .assignment(submission.getAssignment())
                    .primaryDiagnosis(submission.getPrimaryDiagnosis())
                    .subDiagnosis(submission.getSubDiagnosis())
                    .finalJudgment(submission.getFinalJudgment())
                    .submittedAt(submission.getSubmittedAt())
                    .status(submission.getStatus())
                    .build();
            data.add(savedSubmission);
            return savedSubmission;
        }
        data.removeIf(item -> Objects.equals(item.getId(), submission.getId()));
        data.add(submission);
        return submission;
    }
    
    @Override
    public Optional<Submission> findByStudentIdAndAssignmentId(Long studentId, Long assignmentId) {
        return data.stream()
                .filter(submission -> Objects.equals(submission.getStudent().getId(), studentId) 
                        && Objects.equals(submission.getAssignment().getId(), assignmentId))
                .findFirst();
    }
    
    @Override
    public Optional<Submission> findById(Long submissionId) {
        return data.stream()
                .filter(submission -> Objects.equals(submission.getId(), submissionId))
                .findFirst();
    }

    @Override
    public Long countEvaluatedByCourseIdAndAssignmentId(Long courseId, Long assignmentId) {
        return 0L;
    }

    @Override
    public Long countNotEvaluatedByCourseIdAndAssignmentId(Long courseId, Long assignmentId) {
        return 0L;
    }

    @Override
    public Long countNotSubmittedByCourseIdAndAssignmentId(Long courseId, Long assignmentId) {
        return 0L;
    }

    @Override
    public Slice<SubmissionDetailVo> findAllByCourseIdAndAssignmentId(Long courseId, Long assignmentId, Pageable pageable) {
        return null;
    }

    @Override
    public Slice<SubmissionDetailVo> findEvaluatedByCourseIdAndAssignmentId(Long courseId, Long assignmentId, Pageable pageable) {
        return null;
    }

    @Override
    public Slice<SubmissionDetailVo> findEvaluationRequiredByCourseIdAndAssignmentId(Long courseId, Long assignmentId, Pageable pageable) {
        return null;
    }

    @Override
    public Slice<SubmissionDetailVo> findNotSubmittedByCourseIdAndAssignmentId(Long courseId, Long assignmentId, Pageable pageable) {
        return null;
    }
}
