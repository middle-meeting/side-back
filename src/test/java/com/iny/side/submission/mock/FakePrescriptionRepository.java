package com.iny.side.submission.mock;

import com.iny.side.submission.domain.entity.Prescription;
import com.iny.side.submission.domain.repository.PrescriptionRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakePrescriptionRepository implements PrescriptionRepository {
    
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Prescription> data = new ArrayList<>();
    
    @Override
    public Prescription save(Prescription prescription) {
        if (prescription.getId() == null || prescription.getId() == 0) {
            Prescription savedPrescription = Prescription.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .submission(prescription.getSubmission())
                    .drugName(prescription.getDrugName())
                    .dosage(prescription.getDosage())
                    .frequency(prescription.getFrequency())
                    .duration(prescription.getDuration())
                    .build();
            data.add(savedPrescription);
            return savedPrescription;
        }
        data.removeIf(item -> Objects.equals(item.getId(), prescription.getId()));
        data.add(prescription);
        return prescription;
    }
    
    @Override
    public List<Prescription> findBySubmissionId(Long submissionId) {
        return data.stream()
                .filter(prescription -> Objects.equals(prescription.getSubmission().getId(), submissionId))
                .toList();
    }
    
    @Override
    public void deleteBySubmissionId(Long submissionId) {
        data.removeIf(prescription -> Objects.equals(prescription.getSubmission().getId(), submissionId));
    }

    @Override
    public List<Prescription> findBySubmissionIdIn(List<Long> submissionIds) {
        if (submissionIds == null || submissionIds.isEmpty()) {
            return Collections.emptyList();
        }

        return data.stream()
                .filter(prescription -> submissionIds.contains(prescription.getSubmission().getId()))
                .toList();
    }

    public void clear() {
        data.clear();
        autoGeneratedId.set(0);
    }
}
