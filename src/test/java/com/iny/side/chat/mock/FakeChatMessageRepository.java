package com.iny.side.chat.mock;

import com.iny.side.chat.domain.entity.ChatMessage;
import com.iny.side.chat.domain.repository.ChatMessageRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeChatMessageRepository implements ChatMessageRepository {
    
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<ChatMessage> data = new ArrayList<>();
    
    @Override
    public ChatMessage save(ChatMessage chatMessage) {
        if (chatMessage.getId() == null || chatMessage.getId() == 0) {
            ChatMessage savedMessage = ChatMessage.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .submission(chatMessage.getSubmission())
                    .turnNumber(chatMessage.getTurnNumber())
                    .speaker(chatMessage.getSpeaker())
                    .message(chatMessage.getMessage())
                    .timestamp(chatMessage.getTimestamp())
                    .build();
            data.add(savedMessage);
            return savedMessage;
        }
        data.removeIf(item -> Objects.equals(item.getId(), chatMessage.getId()));
        data.add(chatMessage);
        return chatMessage;
    }
    
    @Override
    public List<ChatMessage> findBySubmissionIdOrderByTurnNumber(Long submissionId) {
        return data.stream()
                .filter(message -> Objects.equals(message.getSubmission().getId(), submissionId))
                .sorted((m1, m2) -> Integer.compare(m1.getTurnNumber(), m2.getTurnNumber()))
                .toList();
    }
    
    @Override
    public Integer findMaxTurnNumberBySubmissionId(Long submissionId) {
        return data.stream()
                .filter(message -> Objects.equals(message.getSubmission().getId(), submissionId))
                .mapToInt(ChatMessage::getTurnNumber)
                .max()
                .orElse(0);
    }

    @Override
    public Optional<ChatMessage> findById(Long chatMessageId) {
        return data.stream()
                .filter(message -> Objects.equals(message.getId(), chatMessageId))
                .findFirst();
    }
}
