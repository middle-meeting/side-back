package com.iny.side.course.mock;

import com.iny.side.course.domain.entity.Enrollment;
import com.iny.side.course.domain.repository.EnrollmentRepository;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeEnrollmentRepository implements EnrollmentRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Enrollment> data = new ArrayList<>();

    public Enrollment save(Enrollment enrollment) {
        if (enrollment.getId() == null || enrollment.getId() == 0) {
            Enrollment savedEnrollment = Enrollment.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .account(enrollment.getAccount())
                    .course(enrollment.getCourse())
                    .build();
            data.add(savedEnrollment);
            return savedEnrollment;
        }
        data.removeIf(item -> Objects.equals(item.getId(), enrollment.getId()));
        data.add(enrollment);
        return enrollment;
    }

    @Override
    public List<Enrollment> findAllByAccountIdAndSemester(Long accountId, String semester) {
        return data.stream()
                .filter(e -> e.getAccount().getId().equals(accountId) &&
                        e.getCourse().getSemester().equals(semester))
                .toList();
    }

    @Override
    public Slice<Enrollment> findAllByAccountIdAndSemester(Long accountId, String semester, Pageable pageable) {
        List<Enrollment> filtered = data.stream()
                .filter(e -> e.getAccount().getId().equals(accountId) &&
                        e.getCourse().getSemester().equals(semester))
                .toList();

        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), filtered.size());

        List<Enrollment> content = start < filtered.size() ? filtered.subList(start, end) : new ArrayList<>();
        boolean hasNext = end < filtered.size();

        return new SliceImpl<>(content, pageable, hasNext);
    }

    @Override
    public Optional<Enrollment> findByCourseIdAndStudentId(Long courseId, Long studentId) {
        return data.stream()
                .filter(e -> e.getCourse().getId().equals(courseId) &&
                        e.getAccount().getId().equals(studentId))
                .findFirst();
    }

    @Override
    public Long countAllByCourseId(Long courseId) {
        return data.stream()
                .filter(e -> e.getCourse().getId().equals(courseId))
                .count();
    }
}
