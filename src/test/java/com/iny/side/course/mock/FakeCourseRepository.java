package com.iny.side.course.mock;

import com.iny.side.course.domain.entity.Course;
import com.iny.side.course.domain.repository.CourseRepository;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Slice;
import org.springframework.data.domain.SliceImpl;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

public class FakeCourseRepository implements CourseRepository {

    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<Course> data = new ArrayList<>();

    public Course save(Course course) {
        if (course.getId() == null || course.getId() == 0) {
            Course savedCourse = Course.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .name(course.getName())
                    .semester(course.getSemester())
                    .description(course.getDescription())
                    .account(course.getAccount())
                    .build();
            data.add(savedCourse);
            return savedCourse;
        }
        data.removeIf(item -> Objects.equals(item.getId(), course.getId()));
        data.add(course);
        return course;
    }

    @Override
    public Slice<Course> findAllByAccountIdAndSemester(Long accountId, String semester, Pageable pageable) {
        List<Course> filtered = data.stream()
                .filter(c -> c.getAccount().getId().equals(accountId) &&
                        c.getSemester().equals(semester))
                .toList();

        int start = (int) pageable.getOffset();
        int end = Math.min(start + pageable.getPageSize(), filtered.size());

        List<Course> content = start < filtered.size() ? filtered.subList(start, end) : new ArrayList<>();
        boolean hasNext = end < filtered.size();

        return new SliceImpl<>(content, pageable, hasNext);
    }

    @Override
    public Optional<Course> findById(Long courseId) {
        return data.stream().filter(c -> Objects.equals(c.getId(), courseId)).findFirst();
    }
}
